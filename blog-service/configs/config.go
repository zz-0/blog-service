// Code generated by go-bindata. DO NOT EDIT.
// sources:
// configs/config.yaml
package configs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configsConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x4f\x1b\x47\x14\x7d\x5f\x69\xff\xc3\x48\x7e\xc6\xac\xf9\x4c\xe6\xa9\x69\x42\x54\xaa\xd0\xa0\xda\x11\x8f\xd5\x60\x0f\xcb\xa6\x6b\xef\xb2\x33\x26\x86\x27\xa0\x26\x21\xc4\x60\xda\xda\x31\x71\x80\xd4\x0a\x2e\x8e\x5a\xd6\x8e\x44\x53\x64\x1b\xfc\x67\x3c\x3b\xf6\x13\x7f\xa1\x9a\x1d\xd7\x76\x48\xfb\xb0\xd2\xce\x99\xbb\xe7\x9e\x7b\xef\xb9\x1b\xe8\x6e\xef\xf1\x2b\xd7\x7b\xfd\xa2\xdd\xf8\xc4\x8b\xe9\x8e\x7b\xcd\xaf\xdc\x9b\x66\x86\xed\x7c\xe0\xb9\xca\xaa\x61\x63\xc7\x3b\x2e\x77\xce\xde\x7b\x27\x07\x37\xcd\x0c\xcf\xbd\xf3\x76\x0e\x62\x56\x94\xb4\x2f\x5f\xf1\x62\x5a\x7e\xa8\x2a\xaa\x12\xf0\x8e\xf6\xd8\x6e\x49\xf2\x41\xc9\xa3\x1b\x09\xc1\xd9\x3a\xe8\x94\x32\x5e\xa5\xc4\x9a\xd9\x9b\x66\xa6\xdb\x38\xec\xb8\xa7\xbc\x98\x5e\xa6\xd4\xe6\xc5\x34\x7f\xfb\x33\x3b\xf8\x93\xff\x51\x65\xd9\xf7\x22\xf1\xf6\x66\xc7\xbd\xec\x54\x1b\x2c\xfb\x9a\xfd\x92\x61\xcf\xdf\xb0\xed\xb2\xc8\x74\xb4\xc1\x4e\xcf\xbc\xcc\x26\x6f\x9c\x7b\x85\x4f\xdd\xc2\x85\xaa\x84\xb1\xb3\x8a\x1d\xa8\x2a\x00\x7c\x9f\x4c\xcc\x59\x31\x0c\x41\x0c\x2f\x26\x75\x81\x7c\x43\xa9\x3d\x6f\x39\x14\x82\x3b\x9a\xa6\xf9\x31\x18\xc5\x22\x46\x1c\x3f\x4e\x52\x08\xa6\x7c\x68\xc1\x31\x28\xfe\x0c\x53\x95\x00\xab\xe7\x78\xae\xf2\x59\x25\x52\xb4\x57\xcd\x76\x4b\x7f\x09\x31\xf9\x5a\xf7\x85\x28\xc6\x7b\xb9\x21\x05\x0f\x14\xfa\x31\xfd\x80\x76\xa3\xcc\xb2\xbb\xfd\x9a\x25\xb5\x57\x28\xb3\x56\x81\x6d\x55\xd8\xf9\x61\xe7\xef\x2a\xbb\x4e\xab\xca\x3d\xdb\x86\x40\x48\x7a\x80\x97\x50\xd2\xa4\xf3\x48\xc7\x61\x63\x1d\x43\x10\xf2\x95\xce\xa1\xd4\x30\xe4\x63\x8f\x2c\x3d\x8c\x56\xf1\x3c\xa2\xcb\x10\x10\x6a\x39\x48\xc7\xa3\xa6\xa5\x93\xde\xe5\x43\xc3\xc4\xdf\xa1\x38\x86\x00\xd9\xf6\x10\x36\x93\xa2\x10\x04\x4d\xcb\xef\xd3\x13\xdb\xb4\x50\xec\x4b\x9e\xa4\x8f\x13\x00\x40\xa0\x7d\xb9\xdb\x6e\xfe\xd6\x37\x89\x77\xb4\xc1\x1b\x3b\xed\xd6\x31\x3b\x3f\xe4\x6f\x5d\x76\x95\x1f\xe2\xf1\x47\xf2\xc4\x31\x21\x10\xf3\x85\xa3\xa3\xa1\xb1\xe9\xa0\x16\xd4\x82\x21\x28\xe6\x30\x4a\x28\xa2\x46\xf4\x36\x2b\x3b\xd8\xe7\xb9\x4a\xbb\xbe\xcf\x3e\xe6\xf9\x69\xbd\xef\x2c\x69\x2a\x76\x54\x63\xc7\x1b\x83\x24\xb3\x71\xa4\xe3\x39\x94\x92\xcd\x98\x04\x20\x10\x5f\x04\xc3\x74\x5f\x8e\x85\x7f\xa8\x77\x0b\x17\xec\xf4\x8c\xd5\xb2\xb7\x88\xee\x99\xa6\xf5\x6c\x26\x45\x09\x04\x42\xd6\xff\x13\xf5\x95\x36\x7d\x2d\x00\x8c\x80\xe0\x53\x5b\x1f\x7a\xc7\x83\x83\x9d\xd0\xe5\x5a\xe4\x6b\xde\x9e\xcb\xea\xbf\xf2\x62\x5a\x5a\x4a\xb8\xe2\xb2\xd1\xf9\x7d\xd3\x3b\xac\x76\x5a\x27\xde\x7e\x99\xb9\x27\xed\xeb\x57\x22\x57\x6b\xbb\x5b\x6a\x08\x9f\xbc\xab\xf3\xd2\x06\xcb\x6e\x79\xf9\x9a\xaa\x3c\x40\x14\x2d\x22\x82\x7b\x06\xf9\x3a\xb2\x66\x63\x08\xe2\x6b\x64\xc5\xf4\x6b\x21\xd8\x49\xf8\x63\x5e\x5f\x17\xe7\x79\x44\xc8\x82\xe5\xc4\x20\x08\x8d\x8d\xfb\xab\x60\x11\x2a\x0e\xff\x0e\x62\x7c\x5c\x9b\x92\x4c\xd2\x1d\x8b\xa6\xa5\xff\x40\xb0\xb3\x6a\x44\xb1\xc0\x23\x68\xd1\xc4\xf3\x0e\x5e\x32\x52\xbd\x4b\x81\xde\x5f\x46\x0e\xc1\x14\x82\x24\x5d\xba\x23\xf3\x38\xc4\x5f\x1e\x08\x22\x4e\x12\xf7\x5c\x3a\x1b\x33\xf1\x7d\x2b\x91\x20\x43\xce\x7d\x6c\xe3\x44\x0f\x1b\x97\x3b\xd6\x7d\x79\xe1\x1d\xff\xa4\x2a\xdf\x2e\x44\xc4\xfe\x86\x71\xd4\x11\xd4\x38\x16\x5b\x8b\x3e\x5d\x03\x20\xc0\xaa\xcf\x59\xe6\x8d\xaa\x80\x59\x42\x92\xd8\x91\x3a\x46\x06\x22\x67\x52\xb6\xe1\x60\x08\xa6\xc7\xb4\x1e\xe3\x96\xcb\xdd\x8f\xb2\xc5\xaa\x32\x13\x47\x86\x29\x98\x65\xed\x24\x4e\xed\xe0\xca\x4a\x30\x6a\xc5\x55\x05\xc8\xdf\xc2\xc4\xd4\xa4\xaa\xf8\xcd\x93\x5d\x98\x9c\x9a\x08\x4d\x4f\x4c\x6b\x77\xbf\x1a\x04\x22\x42\x9e\xf9\x9d\xfc\x11\x25\x74\xf1\xdc\x9d\x0e\x69\x63\x9a\x2f\x2b\x1c\x7e\x04\x01\x95\x85\x3f\x74\xac\xf8\x7f\x32\x44\x2c\x39\x34\x00\x46\x6e\xdf\xfe\x13\x00\x00\xff\xff\xc9\x6b\x58\x72\x7c\x05\x00\x00")

func configsConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_configsConfigYaml,
		"configs/config.yaml",
	)
}

func configsConfigYaml() (*asset, error) {
	bytes, err := configsConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/config.yaml", size: 1404, mode: os.FileMode(438), modTime: time.Unix(1639379343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"configs/config.yaml": configsConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"configs": &bintree{nil, map[string]*bintree{
		"config.yaml": &bintree{configsConfigYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

